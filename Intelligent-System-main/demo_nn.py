import streamlit as st
import os
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import load_model

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
MODEL_PATH = "neural_network_model.h5"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
@st.cache_resource
def load_keras_model():
    if os.path.exists(MODEL_PATH):
        try:
            model = load_model(MODEL_PATH)
            # st.sidebar.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return model
        except Exception as e:
            st.sidebar.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏î‡πâ: {e}")
            return None
    else:
        st.sidebar.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô!")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit
def show():
    st.title("üè¶ ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£")
    st.write("üîç ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model = load_keras_model()

    # ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    feature_labels = {
        "CreditScore": "üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï",
        "Age": "üë§ ‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)",
        "Tenure": "üìÖ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏õ‡∏µ)",
        "Balance": "üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ",
        "NumOfProducts": "üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ",
        "HasCrCard": "üí≥ ‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (0=‡πÑ‡∏°‡πà‡∏°‡∏µ, 1=‡∏°‡∏µ)",
        "IsActiveMember": "üü¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (0=‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà, 1=‡πÉ‡∏ä‡πà)",
        "EstimatedSalary": "üíµ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£",
        "Geography_France": "üá´üá∑ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (0=‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà, 1=‡πÉ‡∏ä‡πà)",
        "Geography_Germany": "üá©üá™ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏ô‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (0=‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà, 1=‡πÉ‡∏ä‡πà)",
        "Geography_Spain": "üá™üá∏ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡πÄ‡∏õ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (0=‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà, 1=‡πÉ‡∏ä‡πà)",
        "Gender_Male": "üöπ ‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (0=‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà, 1=‡πÉ‡∏ä‡πà)"
    }

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô Grid Layout
    st.subheader("üìä ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
    feature_values = []
    cols = st.columns(3)  # ‡πÉ‡∏ä‡πâ 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå

    feature_names = list(feature_labels.keys())  # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    for i, feature_name in enumerate(feature_names):
        with cols[i % 3]:  # ‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á input ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            feature = st.number_input(
                f"{feature_labels[feature_name]}",
                min_value=0.0, max_value=1000000.0, value=00.0
            )
            feature_values.append(feature)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ input ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    input_data = np.array([feature_values]).reshape(1, len(feature_names))

    # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
    st.subheader("üîÆ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")
    if model is not None:
        if st.button("üìä ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•", use_container_width=True):
            prediction = model.predict(input_data)[0][0]
            result_text = "‚úÖ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° **‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà** ‡∏Å‡∏±‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" if prediction < 0.5 else "‚ùå ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° **‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£**"
            # st.success(f"üìå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•: {prediction:.4f}")
            st.warning(result_text)
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå")

  
